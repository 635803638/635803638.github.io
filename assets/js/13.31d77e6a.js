(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{213:function(i,_,v){"use strict";v.r(_);var t=v(0),e=Object(t.a)({},(function(){var i=this,_=i.$createElement,v=i._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[v("h1",{attrs:{id:"git命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git命令","aria-hidden":"true"}},[i._v("#")]),i._v(" git命令")]),i._v(" "),v("p",[i._v("###01git(概述)")]),i._v(" "),v("ul",[v("li",[v("p",[i._v("1.什么是git")])]),i._v(" "),v("li",[v("p",[i._v("Git 是目前世界上最先进的分布式版本控制系统\n###02_创建版本库\n设置用户名，邮箱")]),i._v(" "),v("p",[i._v('git config --global user.name "姓名"\ngit config --global user.email "hs635803638@163.com"')])])]),i._v(" "),v("ul",[v("li",[v("p",[v("code",[i._v("mkdir 文件名")]),i._v("      新建文件")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("cat 文件名")]),i._v(" 查看文件")])]),i._v(" "),v("li",[v("p",[i._v("忽略文件不上传 放在.gitignore里面  里面写文件名例如log.txt 或者整个文件夹/dir")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("pwd")]),i._v("  显示当前目录")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git init")]),i._v(" 创建一个git仓库")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git add readme.txt")]),i._v(" 添加到缓存区")])]),i._v(" "),v("li",[v("p",[v("code",[i._v('git commit -m "Message')]),i._v(" 提交说明")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git status")]),i._v(" 查看状态")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git branch")]),i._v("查看分支  其中加-a代表查看远程分支 没加-a表示查看本地分支")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git branch 分支名")]),i._v("创建分支")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git checkout 分支名")]),i._v("切换分支")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git push origin 分支名")]),i._v("将本地的修改推送到远程服务器上")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git diff 文件名")])])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git merge 分支名")]),i._v("  合并分支")])]),i._v(" "),v("li",[v("p",[i._v("版本回退")])]),i._v(" "),v("li",[v("p",[i._v("上一个版本就是 HEAD^，上上一个版本就是 HEAD^^，当然往上 100 个版本写 100 个^比较\n容易数不过来，所以写成 HEAD~100。")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git reset --hard HEAD^")]),i._v("退回上一个版本")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git reset --hard 3628164")]),i._v(" 按commit id回退")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git reflog")]),i._v(" 查看 commit id")])]),i._v(" "),v("li",[v("p",[i._v("第一次修改 -> git add -> 第二次修改 -> git commit")])]),i._v(" "),v("li",[v("p",[i._v("Git 管理的是修改，当你用“git add”命令后，在工作区的第一\n次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，“git commit”只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git diff HEAD -- readme.txt")]),i._v("\n命令可以查看工作区和版本库里面最新版本的区别")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git checkout -- file")]),i._v(" 可以丢弃工作区的修改：")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git reset HEAD file")]),i._v(" 可以把暂存区的修改撤销掉（unstage），\n重新放回工作区")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git rm file")]),i._v(" 删除文件")])]),i._v(" "),v("li",[v("p",[v("code",[i._v("git checkout -- file")]),i._v(" 可以丢弃工作区的修改：")])])])])}),[],!1,null,null,null);_.default=e.exports}}]);